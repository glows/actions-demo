{"version":3,"sources":["router.js","components/About/index.js","components/Inbox/index.js","config.js","pages/Home/index.js","pages/MyCanvas/index.js","App.js","serviceWorker.js","index.js"],"names":["RouterView","props","console","log","routes","map","item","index","key","path","render","routeProps","children","component","About","Component","PureComponent","className","to","exact","Inbox","canvas","React","createRef","this","current","getContext","ctx","Object","getPrototypeOf","Triangle","x","y","r","save","translate","rotate","beginPath","moveTo","lineTo","closePath","fill","restore","line","x1","y1","stroke","strokeStyle","Math","PI","ref","width","height","App","basename","config","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iTAmBiBA,EAfE,SAACC,GAGd,OAFAC,QAAQC,IAAIF,EAAMG,QAEXH,EAAMG,OAAOC,KAAI,SAACC,EAAKC,GAE1B,OAAO,kBAAC,IAAD,CAAOC,IAAKD,EAAOE,KAAMH,EAAKG,KAAMC,OAAQ,SAACC,GAEhD,OAAGL,EAAKM,SACD,kBAACN,EAAKO,UAAN,iBAAoBF,EAApB,CAAgCP,OAAQE,EAAKM,YAEzC,kBAACN,EAAKO,UAAcF,UCZxBG,E,uKAEb,OACI,uD,GAHuBC,aCAdR,E,uKAEb,OACI,kC,GAHuBS,iBCyBpBZ,G,MAtBA,CAEX,CACIK,KAAM,IACNI,U,uKCFJ,OACE,yBAAKI,UAAU,QACb,2CACA,uBAAGA,UAAU,QACX,kBAAC,IAAD,CAAMC,GAAG,UAAT,WAEF,6BACA,uBAAGD,UAAU,QACX,kBAAC,IAAD,CAAMC,GAAG,cAAT,4B,GAVwBF,iBDK1BG,OAAO,GAEX,CACIV,KAAM,SACNI,UAAWC,GAEf,CACIL,KAAM,SACNI,UAAWO,GAEf,CACIX,KAAM,aACNI,U,kDEjBJ,aAAc,IAAD,8BACT,gBACKQ,OAASC,IAAMC,YAFX,E,gEAMT,IAAMF,EAASG,KAAKH,OAAOI,QAE3B,GAAIJ,EAAOK,WAAY,CACnB,IAAIC,EAAMN,EAAOK,WAAW,MAC5BxB,QAAQC,IAAIwB,GACZzB,QAAQC,IAAIyB,OAAOC,eAAeF,IAE9BC,OAAOC,eAAeF,GAAKG,SAAW,SAAUC,EAAGC,EAAGC,GAClDT,KAAKU,OACLV,KAAKW,UAAUJ,EAAGC,GAClBR,KAAKY,OAAOH,GACZT,KAAKa,YACLb,KAAKc,OAAO,EAAG,GACfd,KAAKe,OAAO,GAAI,GAChBf,KAAKe,OAAO,EAAG,IACff,KAAKe,QAAQ,GAAI,GACjBf,KAAKgB,YACLhB,KAAKiB,OACLjB,KAAKkB,WAETd,OAAOC,eAAeF,GAAKgB,KAAO,SAAUZ,EAAGC,EAAGY,EAAIC,GAClDrB,KAAKU,OACLV,KAAKa,YACLb,KAAKc,OAAOP,EAAGC,GACfR,KAAKe,OAAOK,EAAIC,GAChBrB,KAAKsB,SACLtB,KAAKkB,WAGbf,EAAIoB,YAAc,UAClBpB,EAAIgB,KAAK,GAAI,IAAK,IAAK,KACvBhB,EAAIG,SAAS,IAAK,IAAgB,IAAVkB,KAAKC,O,+BAKjC,OACI,6BACI,iDAGA,4BAAQC,IAAK1B,KAAKH,OAAQ8B,MAAM,MAAMC,OAAO,c,GAlD1BpC,oBCSdqC,E,uKAEf,OACI,yBAAKpC,UAAU,OACX,kBAAC,IAAD,CAAQqC,SAAS,iBAEb,kBAAC,EAAD,CAAYlD,OAAQmD,U,GANLxC,aCCbyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASnD,OACP,kBAAC,IAAMoD,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMC,c","file":"static/js/main.bd725c67.chunk.js","sourcesContent":["  // 加载路由视图组件得函数组件 -加载条件-路由路径对应路由视图组件 一一对应得关系   --->获取路由配置表\n  import React from 'react';\n  // 引入路由内置组件\n  import {Route} from 'react-router-dom'\n  const RouterView=(props)=>{   // 函数组件得props属性\n      console.log(props.routes);   // 获取路由配置表\n      // 一一对应关系  遍历\n      return props.routes.map((item,index)=>{\n          // 路由对象   加载路由视图组件\n          return <Route key={index} path={item.path} render={(routeProps)=>{  // routeProps 路由元信息\n              // 判断当前得路由对象是否存在子路由\n              if(item.children){   // 存在路由嵌套    递归函数\n              return <item.component {...routeProps} routes={item.children}/> \n              }else{    // 不存在路由嵌套\n                  return <item.component {...routeProps}/>\n              }\n          }}/>\n      })\n  }\n  export default RouterView;","import React, { Component } from 'react'\n\nexport default class About extends Component {\n    render() {\n        return (\n            <div>\n                This is About page\n            </div>\n        )\n    }\n}\n","import React, { PureComponent } from 'react'\n\nexport default class index extends PureComponent {\n    render() {\n        return (\n            <div>\n                \n            </div>\n        )\n    }\n}\n","import About from './components/About'\nimport Inbox from './components/Inbox';\nimport Home from './pages/Home';\nimport MyCanvas from './pages/MyCanvas'\n\nconst routes = [\n\n    {\n        path: '/',\n        component: Home,\n        exact: true //是否为严格模式\n    },\n    {\n        path: '/about',\n        component: About\n    },\n    {\n        path: '/inbox',\n        component: Inbox\n    },\n    {\n        path: '/my-canvas',\n        component: MyCanvas\n    },\n    \n]\n\nexport default routes","/* eslint-disable */\nimport React, { PureComponent } from \"react\";\nimport \"./index.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nexport default class Home extends PureComponent {\n  render() {\n    return (\n      <div className=\"home\">\n        <div>Home pages</div>\n        <a className=\"link\">\n          <Link to=\"/about\"> About</Link>\n        </a>\n        <br/>\n        <a className=\"link\">\n          <Link to=\"/my-canvas\"> React-canvas-demo</Link>\n        </a>\n        \n        \n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react'\n\nexport default class index extends PureComponent {\n\n\n    constructor(){\n        super()\n        this.canvas = React.createRef()\n    }\n\n    componentDidMount(){\n        const canvas = this.canvas.current\n\n        if (canvas.getContext) {\n            var ctx = canvas.getContext(\"2d\");\n            console.log(ctx);\n            console.log(Object.getPrototypeOf(ctx));\n            (function () {\n                Object.getPrototypeOf(ctx).Triangle = function (x, y, r) {\n                    this.save();\n                    this.translate(x, y);\n                    this.rotate(r);\n                    this.beginPath();\n                    this.moveTo(0, 0);\n                    this.lineTo(10, 0);\n                    this.lineTo(0, 10);\n                    this.lineTo(-10, 0);\n                    this.closePath();\n                    this.fill();\n                    this.restore();\n                }\n                Object.getPrototypeOf(ctx).line = function (x, y, x1, y1) {\n                    this.save();\n                    this.beginPath();\n                    this.moveTo(x, y);\n                    this.lineTo(x1, y1);\n                    this.stroke();\n                    this.restore();\n                }\n            })();\n            ctx.strokeStyle = \"#7C8B8C\";\n            ctx.line(90, 130, 320, 210);\n            ctx.Triangle(320, 210, -Math.PI * .4);\n\n        }\n    }\n    render() {\n        return (\n            <div>\n                <h3>React Canvas Demo</h3>\n\n\n                <canvas ref={this.canvas} width=\"780\" height=\"1800\">\n\n                </canvas>\n\n            </div>\n        )\n    }\n}\n","/* eslint-disable */\nimport React, { Component } from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport \"./App.css\";\n// 引入加载路由视图得函数组件\nimport RouterView from \"./router.js\";\n// 引入路由配置表\nimport config from \"./config.js\";\n\nexport default class App extends Component {\n  render() {\n      return (\n          <div className='App'>\n              <Router basename=\"/actions-demo\">\n                  {/* 加载/展示路由视图组件 */}\n                  <RouterView routes={config}/>\n              </Router>\n          </div>\n      )\n  }\n}\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <Router>\n//         {/* 加载/展示路由视图组件 */}\n//         <RouterView routes={config} />\n//       </Router>\n//     </div>\n//   );\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}