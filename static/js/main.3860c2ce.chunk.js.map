{"version":3,"sources":["logo.svg","App.js","pages/Detail/index.js","components/About/index.js","pages/MyCanvas/index.js","Router/index.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","to","Detail","PureComponent","About","Component","index","canvas","React","createRef","this","current","getContext","ctx","console","log","Object","getPrototypeOf","Triangle","x","y","r","save","translate","rotate","beginPath","moveTo","lineTo","closePath","fill","restore","line","x1","y1","stroke","strokeStyle","Math","PI","ref","width","height","AppRouter","path","exact","component","MyCanvas","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,oICyC5BC,MA5Bf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAahB,2BACC,kBAAC,IAAD,CAAMC,GAAG,UAAT,UAED,2BACC,kBAAC,IAAD,CAAMA,GAAG,cAAT,yB,6BCXMC,EApBf,uKAEQ,OACI,4EAHZ,GAA4BC,iBCAPC,E,uKAEb,OACI,uD,GAHuBC,aCAdC,E,kDAGjB,aAAc,IAAD,8BACT,gBACKC,OAASC,IAAMC,YAFX,E,gEAMT,IAAMF,EAASG,KAAKH,OAAOI,QAE3B,GAAIJ,EAAOK,WAAY,CACnB,IAAIC,EAAMN,EAAOK,WAAW,MAC5BE,QAAQC,IAAIF,GACZC,QAAQC,IAAIC,OAAOC,eAAeJ,IAE9BG,OAAOC,eAAeJ,GAAKK,SAAW,SAAUC,EAAGC,EAAGC,GAClDX,KAAKY,OACLZ,KAAKa,UAAUJ,EAAGC,GAClBV,KAAKc,OAAOH,GACZX,KAAKe,YACLf,KAAKgB,OAAO,EAAG,GACfhB,KAAKiB,OAAO,GAAI,GAChBjB,KAAKiB,OAAO,EAAG,IACfjB,KAAKiB,QAAQ,GAAI,GACjBjB,KAAKkB,YACLlB,KAAKmB,OACLnB,KAAKoB,WAETd,OAAOC,eAAeJ,GAAKkB,KAAO,SAAUZ,EAAGC,EAAGY,EAAIC,GAClDvB,KAAKY,OACLZ,KAAKe,YACLf,KAAKgB,OAAOP,EAAGC,GACfV,KAAKiB,OAAOK,EAAIC,GAChBvB,KAAKwB,SACLxB,KAAKoB,WAGbjB,EAAIsB,YAAc,UAClBtB,EAAIkB,KAAK,GAAI,IAAK,IAAK,KACvBlB,EAAIK,SAAS,IAAK,IAAgB,IAAVkB,KAAKC,O,+BAKjC,OACI,6BACI,iDAGA,4BAAQC,IAAK5B,KAAKH,OAAQgC,MAAM,MAAMC,OAAO,c,GAlD1BrC,iBCiBpBsC,EAXG,kBAChB,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW7C,IACjC,kBAAC,IAAD,CAAO2C,KAAK,cAAcE,UAAW1C,IACrC,kBAAC,IAAD,CAAOwC,KAAK,aAAaE,UAAWC,IACpC,kBAAC,IAAD,CAAOH,KAAK,SAASE,UAAWxC,OCFlB0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MADF,KAGAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.3860c2ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"," /* eslint-disable */\nimport React from 'react';\n\nimport { \n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        {/* <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p> */}\n        {/* <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n        <a>\n         <Link to=\"/about\">About</Link> \n        </a>\n        <a>\n         <Link to=\"/my-canvas\">React-Canvas-demo</Link> \n        </a>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { PureComponent } from 'react'\n\nexport class Detail extends PureComponent {\n    render() {\n        return (\n            <div>\n                Detail\n\n\n\n                1234\n                123123\n                123123\n                123123\n\n                1231\n                2\n            </div>\n        )\n    }\n}\n\nexport default Detail\n","import React, { Component } from 'react'\n\nexport default class About extends Component {\n    render() {\n        return (\n            <div>\n                This is About page\n            </div>\n        )\n    }\n}\n","import React, { PureComponent } from 'react'\n\nexport default class index extends PureComponent {\n\n\n    constructor(){\n        super()\n        this.canvas = React.createRef()\n    }\n\n    componentDidMount(){\n        const canvas = this.canvas.current\n\n        if (canvas.getContext) {\n            var ctx = canvas.getContext(\"2d\");\n            console.log(ctx);\n            console.log(Object.getPrototypeOf(ctx));\n            (function () {\n                Object.getPrototypeOf(ctx).Triangle = function (x, y, r) {\n                    this.save();\n                    this.translate(x, y);\n                    this.rotate(r);\n                    this.beginPath();\n                    this.moveTo(0, 0);\n                    this.lineTo(10, 0);\n                    this.lineTo(0, 10);\n                    this.lineTo(-10, 0);\n                    this.closePath();\n                    this.fill();\n                    this.restore();\n                }\n                Object.getPrototypeOf(ctx).line = function (x, y, x1, y1) {\n                    this.save();\n                    this.beginPath();\n                    this.moveTo(x, y);\n                    this.lineTo(x1, y1);\n                    this.stroke();\n                    this.restore();\n                }\n            })();\n            ctx.strokeStyle = \"#7C8B8C\";\n            ctx.line(90, 130, 320, 210);\n            ctx.Triangle(320, 210, -Math.PI * .4);\n\n        }\n    }\n    render() {\n        return (\n            <div>\n                <h3>React Canvas Demo</h3>\n\n\n                <canvas ref={this.canvas} width=\"780\" height=\"1800\">\n\n                </canvas>\n\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\nimport App from '../App';\n// import router from './router.js'\nimport Detail from '../pages/Detail';\nimport About from '../components/About'\nimport MyCanvas from '../pages/MyCanvas';\n\nconst AppRouter = () => (\n  <Router>\n    <div>\n      <Route path=\"/\" exact component={App} />\n      <Route path=\"/detail/:id\" component={Detail} />\n      <Route path=\"/my-canvas\" component={MyCanvas} />\n      <Route path=\"/about\" component={About} />\n    </div>\n  </Router>\n);\n\nexport default AppRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport AppRouter from './Router'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppRouter />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}